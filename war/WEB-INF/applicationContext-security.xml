<?xml version="1.0" encoding="UTF-8"?>
<!-- - Application context containing authentication, channel - security 
	and web URI beans. - - Only used by "filter" artifact. - -->

<b:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<!-- <global-method-security pre-post-annotations="enabled"> -->
	<!-- <expression-handler ref="expressionHandler"/> -->
	<!-- </global-method-security> -->

	<global-method-security secured-annotations="enabled">
	</global-method-security>

	<b:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />


	<!-- We just actually need to set the default failure url here -->
	<b:bean id="customAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<b:property name="defaultFailureUrl" value="/krams/auth/login?error=true" />
	</b:bean>

	<!-- We just actually need to set the default target url here -->
	<b:bean id="customAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
		<b:property name="defaultTargetUrl" value="/krams/main/common" />
	</b:bean>

	<!-- Custom filter for username and password. The real customization is 
		done in the customAthenticationManager -->
	<b:bean id="authenticationFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<b:property name="authenticationManager" ref="customAuthenticationManager" />
		<b:property name="authenticationFailureHandler" ref="customAuthenticationFailureHandler" />
		<b:property name="authenticationSuccessHandler" ref="customAuthenticationSuccessHandler" />

	</b:bean>


	<!-- The AuthenticationEntryPoint is responsible for redirecting the user 
		to a particular page, like a login page, whenever the server sends back a 
		response requiring authentication
		http://krams915.blogspot.com/2010/12/spring-security-mvc-integration-using_26.html 
		-->
	<!-- See Spring-Security Reference 5.4.1 for more info -->
	<b:bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">

		<b:property name="loginFormUrl" value="/index.html#/login?error=3" />
	</b:bean>
	
	
	

	<http access-denied-page="/accessDenied.jsp" auto-config="false" entry-point-ref="authenticationEntryPoint" >



		<intercept-url pattern="/del.html" access="ROLE_PROXY" />
		<intercept-url pattern="secured/**" access="ROLE_PROXY" />
		<intercept-url pattern="/index.html#/map" access="ROLE_PROXY" />


		<form-login login-page="/index.html#/login"
			authentication-failure-url="/loginError"		
			default-target-url="/loginSuccess"
			always-use-default-target="true" />
			
		<anonymous username="Anonim" granted-authority="ROLE_ANONIM"/>

		<logout logout-success-url="/logoutSuccess" logout-url="/logout" invalidate-session="true"/>

		<session-management>
			<concurrency-control max-sessions="1"
				expired-url="/index.html#/login?error=2" session-registry-ref="sessionRegistry" />

		</session-management>
		
		
		
		

	</http>

	<b:bean id="customAuthenticationManager" class="net.andruszko.lepapp.web.auth.CustomAuthManager" />

	<b:bean id="authenticationFilter2"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">

		<b:property name="authenticationManager" ref="customAuthenticationManager" />
 
	</b:bean>
	
	
	<b:bean id="customUserDetailsService" class="net.andruszko.lepapp.web.auth.CustomUserDetailsService">
		<b:property name="userService" ref="userService" />
	</b:bean>
	
	<b:bean id="userService" class="net.andruszko.lepapp.web.service.UserServiceImpl">	
	</b:bean>
	
	

	<authentication-manager alias="authenticationManager" >


		<authentication-provider user-service-ref="customUserDetailsService">
			<password-encoder hash="md5" />			
		</authentication-provider>
	</authentication-manager>

	<!-- <authentication-manager> -->
	<!-- <authentication-provider> -->
	<!-- <password-encoder hash="md5"/> -->
	<!-- <jdbc-user-service data-source-ref="dataSource"/> -->
	<!-- </authentication-provider> -->
	<!-- </authentication-manager> -->

	<!-- Automatically receives AuthenticationEvent messages -->
	<b:bean id="loggerListener"
		class="org.springframework.security.authentication.event.LoggerListener" />

	<!-- Filter used to switch the user context. Note: the switch and exit url 
		must be secured based on the role granted the ability to 'switch' to another 
		user -->
	<!-- In this example 'rod' has ROLE_SUPERVISOR that can switch to regular 
		ROLE_USER(s) -->
<!-- 	<b:bean id="switchUserProcessingFilter" -->
<!-- 		class="org.springframework.security.web.authentication.switchuser.SwitchUserFilter" -->
<!-- 		autowire="byType"> -->
<!-- 		<b:property name="targetUrl" value="/secured/index.htm" /> -->
<!-- 	</b:bean> -->

	<!-- <b:bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler"> -->
	<!-- <b:property name="permissionEvaluator" ref="permissionEvaluator"/> -->
	<!-- </b:bean> -->

	<!-- <b:bean id="permissionEvaluator" class="org.springframework.security.acls.AclPermissionEvaluator"> -->
	<!-- <b:constructor-arg ref="aclService"/> -->
	<!-- </b:bean> -->
</b:beans>
